{"version":3,"sources":["img/1.jpg","img/2.jpg","img/3.jpg","img/4.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","animals","details1","details2","content","App","props","scrollManager","mainContentInitialPosition","state","mainContentOpacity","window","scrollY","y","setState","sticky","t","Math","abs","scrollPercentage","floor","rgba","primaryText","secondaryText","mainContentImage","one","headerText","two","three","four","scrollDirection","console","log","charAt","replace","length","mainContent","React","createRef","addEventListener","this","bounding","current","getBoundingClientRect","class","style","opacity","ref","id","alt","src","backgroundColor","fontWeight","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0603fcf1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.654eb15f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.ef3816cf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.108f052f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.faaee418.jpg\";","import React, { Component } from 'react';\n\nimport './App.css';\nimport one from './img/1.jpg';\nimport two from './img/2.jpg';\nimport three from './img/3.jpg';\nimport four from './img/4.jpg';\n\nvar imageUrl = '';\nvar scrollPercentage = 0;\n\n\nvar animals = ['Antelope','Elephant','Zebra','Giraffe'];\nvar details1 = [\n'Antelopes can measure 178 cm at the shoulder and weigh almost 950 kg. They habitually stand on their two hind legs to reach acacia and other tree foliage.are ruminants, so have well-developed molar teeth, which grind cud (food balls stored in the stomach) into a pulp for further digestion. '\n,'African elephants are the largest land animals on Earth. They are slightly larger than their Asian cousins and can be identified by their larger ears that look somewhat like the continent of Africa. (Asian elephants have smaller, rounded ears.)'\n,'Zebras are equids, members of the horse family. They have excellent hearing and eyesight and can run at speeds of up to 35 miles per hour (56 kilometers per hour). They also have a powerful kick that can cause serious injury to a predator, like a lion, a hyena, or an African wild dog. Usually the lead male of the herd, called a stallion, sounds the alarm if danger is spotted and stays at the back of the group to defend against predators if necessary, while the mares (females) and foals (youngsters) run away.'\n,\"Giraffes are the world's tallest mammals, thanks to their towering legs and long necks. A giraffe's legs alone are taller than many humans—about 6 feet . These long legs allow giraffes to run as fast as 35 miles an hour over short distances and cruise comfortably at 10 miles an hour over longer distances.\"\n]\n\nvar details2 = [\n'Antelope have a wide variety of coverings, though most have a dense coat of short fur. In most species, the coat (pelage) is some variation of a brown colour (or several shades of brown), often with white or pale underbodies.'\n,'During the dry season, they use their tusks to dig up dry riverbeds and create watering holes many animals can drink from. Their dung is full of seeds, helping plants spread across the environment—and it makes pretty good habitat for dung beetles too! '\n,'Zebras often trot when moving to new pastures, which is a fairly fast but easy gait for them to use over the long distances they may have to travel. Their hard hooves are designed to withstand the impact of their body weight and to run easily over rocky ground. When resting at night, zebras lie down while one stands watch to prevent an ambush.'\n,\"Giraffes use their height to good advantage and browse on leaves and buds in treetops that few other animals can reach (acacias are a favorite). Even the giraffe's tongue is long! The 21-inch tongue helps them pluck tasty morsels from branches. Giraffes eat most of the time and, like cows, regurgitate food and chew it as cud. A giraffe eats hundreds of pounds of leaves each week and must travel miles to find enough food\"\n]\n\nvar content = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque ultrices convallis accumsan. Phasellus';\nvar addMe = '';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n\n    this.mainContent = React.createRef();\n    this.state={\n      mainContentInitialPosition :{},\n      sticky:'',\n      scrollPercentage:0,\n      mainContentOpacity:0,\n      mainContentImage:null,\n      scrollDirection:0,\n      headerText:'',\n      secondaryText:'',\n      primaryText:'',\n      rgba:0,\n\n    }\n\n  }\n\n  componentWillMount(){\n    window.addEventListener('scroll',this.scrollManager);\n    this.setState({\n      primaryText:details1[0],\n      secondaryText:details2[0],\n      mainContentImage:one,\n      headerText:animals[0]\n    });\n  }\n\n  scrollManager = () =>{\n    var mainContentInitialPosition = this.state.mainContentInitialPosition;\n   \n\n   \n\n    var mainContentOpacity = window.scrollY/mainContentInitialPosition.y\n    this.setState({\n      mainContentOpacity: mainContentOpacity\n    });\n   \n   \n    if(mainContentInitialPosition.y < window.scrollY){\n\n      this.setState({\n        sticky:'sticky'\n      });\n\n      var t = Math.abs(window.scrollY/mainContentInitialPosition.y);\n      var scrollPercentage = (Math.abs(window.scrollY/mainContentInitialPosition.y) - Math.floor(t))*100;\n      \n      var rgba = (window.scrollY/mainContentInitialPosition.y)/2;\n      this.setState({\n        scrollPercentage:scrollPercentage,\n        rgba:rgba\n      });\n  \n    }else{\n      this.setState({\n        sticky:''\n      })\n    }\n\n    if(this.state.scrollPercentage <=25 && this.state.scrollPercentage > 1){\n      this.setState({\n        primaryText:details1[0],\n        secondaryText:details2[0],\n        mainContentImage:one,\n        headerText:animals[0]\n      });\n      \n    }else if(this.state.scrollPercentage <=50){\n\n      this.setState({\n        primaryText:details1[1],\n        secondaryText:details2[1],\n        mainContentImage:two,\n        headerText:animals[1]\n      });\n    }else if(this.state.scrollPercentage <=75){\n      this.setState({\n        primaryText:details1[2],\n        secondaryText:details2[2],\n        mainContentImage:three,\n        headerText:animals[2]\n      });\n    }else if(this.state.scrollPercentage <=100){\n      this.setState({\n        primaryText:details1[3],\n        secondaryText:details2[3],\n        mainContentImage:four,\n        headerText:animals[3]\n      });\n    }\n\n\n    if(this.state.scrollDirection < window.scrollY){\n\n      console.log(content.charAt(0));\n      //console.log('DOWN');\n      //addMe = addMe.concat(content.charAt(0));\n\n     // content = content.replace(content.charAt(0), \"\");\n      console.log(addMe);\n    }else{\n      console.log('UP');\n      //content = content.concat(addMe.charAt(0));\n\n      //addMe = addMe.replace(addMe.charAt(addMe.length-1), \"\");\n\n     content = content.replace(content.charAt(content.length-1), \"\");\n     console.log(content);\n    }\n\n    this.setState({\n      scrollDirection:window.scrollY\n    });\n\n\n\n\n  }\n\n  componentDidMount(){\n\n    var bounding  = this.mainContent.current.getBoundingClientRect();\n    this.setState({\n      mainContentInitialPosition:bounding\n    })\n  //  console.log(bounding);\n  }\n  render() {\n    return (\n      <div> \n          <div class='header'>\n        <div class=\"landingContent\">\n\n            <span>Kenya</span>\n        </div>\n\n    </div>\n    <div class={`rootLayout ${this.state.sticky}`} style={{opacity:this.state.mainContentOpacity}} ref={this.mainContent} id='myLayout'>\n        <div class=\"image\">\n            <img class='changeMe' alt={this.state.headerText} src={this.state.mainContentImage}/>\n\n        </div>\n        <div class=\"content-1\" style={{backgroundColor:`rgba(210,180,140,${this.state.rgba})`}}>\n            <span style={{fontWeight:'bold'}}>{this.state.headerText}</span>\n            <p>\n        {this.state.primaryText}\n            </p>\n           </div>\n        <div class=\"content-2\" style={{backgroundColor:`rgba(255,248,220,${this.state.rgba})`}} >\n           {this.state.secondaryText}\n        </div>\n\n    </div>\n  \n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}